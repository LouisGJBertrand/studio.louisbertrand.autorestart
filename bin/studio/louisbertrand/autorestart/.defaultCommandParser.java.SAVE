package studio.louisbertrand.autorestart;

// import org.bukkit.command.Command;
// import org.bukkit.command.CommandSender;
// import org.bukkit.plugin.java.JavaPlugin;
import java.lang.reflect.Array;
import javax.annotation.Nonnull;
import org.bukkit.ChatColor;
import org.bukkit.configuration.file.FileConfiguration;

/**
 * defaultCommandParser
 * 
 * the default command parser of the plugin.
 * it parses the default command when triggered by the console
 * or a player.
 * 
 * @author Louis BERTRAND
 *
 */
public class defaultCommandParser {

    /**
     * Config is the plugin configuration that could be used through the
     * parsing of the command
     */
    public @Nonnull FileConfiguration config;
    
    /**
     * Dictionary correspond to a list of functions to trigger
     * according to the defaultcmd.config.yml file
     */
    public @Nonnull FileConfiguration dictionary;
    
    /**
     * This variable correspond to the command name for logging
     * purposes.
     * 
     * E.G. commandName = "spawn" means that when it logs something
     * the name spawn will be used to show which command has been
     * triggered in the chat.
     */
    public String commandName;

    /**
     * Constructor;
     * 
     * @param plugin
     * the plugin for configurations
     */
    public defaultCommandParser( final Main plugin) {

        // Loading the Plugin Configurations
        this.config = plugin.getConfig();

        // Loading the Command Plugin Configurations
        Integer dictionaryId = plugin.ConfigCommandsID;
        this.dictionary = (FileConfiguration)Array.get(plugin.customConfigs, dictionaryId);

    }

    /**
     * Parse;
     * 
     * parse is a function that is used to parse the command arguments in order to
     * trigger the function attached to it.
     * 
     * @param args
     * the arguments passed when calling the function by chat or console
     * 
     * @return commandResponse
     * 
     */
    public commandResponse parse(final String[] args) {

        final commandResponse response = new commandResponse();
        response.code = 1;
        response.message = logParser("This parametter is not defined, please check the help.\r\nto get the help type /"
                + this.commandName + " <help>", response.code);

        return response;

    }

    /**
     * logParser;
     * 
     * Returns a parsed message for logging
     * 
     * @param strings
     * @return
     */
    public String logParser(final String strings, final Integer type) {

        final String formatPrefix = "[";
        final String formatSuffix = "]";

        // 0: Everything is fine
        // 1: ERROR
        // 2: WARNING
        final ChatColor[] formatColors = { ChatColor.RED, ChatColor.GREEN, ChatColor.GOLD };

        final ChatColor color = (ChatColor) Array.get(formatColors, type);

        final String response = formatPrefix+color.toString()+this.commandName+ChatColor.RESET.toString()+formatSuffix;
        return response;
    }
	
}
